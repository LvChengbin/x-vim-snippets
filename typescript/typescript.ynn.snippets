# create a controller
snippet ynn.co?n?t?r?o?l?l?e?r?
import { Controller, Post, Get, Put, Delete, Body, Query, Param } from '@ynn/http';

@Controller( ${1} )
export class ${2}Controller {
	constructor() {}

	${0:${VISUAL}}
}
endsnippet

snippet ynn.c.crud
import { Controller, Post, Get, Put, Delete, Body, Query, Param } from '@ynn/http';
import {} from '../../interfaces';

@Controller( ${1} )
export class ${2}Controller {
	constructor() {}

	@Get( ':id' )
	async get(): Promise<> {
	}

	@Post()
	async create(): Promise<{ id: string }> {
	}

	@Delete( ':id' )
	async delete(): Promise<void> {
	}

	@Put( ':id' )
	async update(): Promise<void> {
	}
}
endsnippet

# new Ynn 
snippet ;;ynn "new Ynn()"
new Ynn( {
	root : __dirname,
	debugging : ${1:false},
	logging : ${2:true}${0:${VISUAL}}
} );
endsnippet

# Ynn Initialize
snippet ;;y.i "const Ynn = require( 'ynn' ); ... module.exports = app;"
const Ynn = require( 'ynn' );

const app = new Ynn( {
	root : __dirname,
	debugging : ${1:false},
	logging : ${2:true}${0:${VISUAL}}
} );

module.parent || app.listen( Ynn.cargs.port );
module.exports = app;
endsnippet

# ynn controller
snippet ;;y.c "class extends Ynn.Controller {};"
const Ynn = require( 'ynn' );

module.exports = class${1: }extends Ynn.Controller {
	${0:${VISUAL}}
}
endsnippet

# ynn service
snippet ;;y.s "class extends Ynn.Service {};"
const Ynn = require( 'ynn' );

module.exports = class${1: }extends Ynn.Service {
	${0:${VISUAL}}
}
endsnippet

# ynn action
snippet ;;y.a "indexAction() {}"
${1:index}Action() {
	const { ctx } = this;
	const { query } = ctx;
	const { body } = ctx.request;
	${0:${VISUAL}}
}
endsnippet

# ynn action
snippet ;;y.aa "async indexAction() {}"
async ${1:index}Action() {
	${0:${VISUAL}}
}
endsnippet

# ynn plugin
snippet ;;y.p "module.exports = ( app, options ) => { ... }"
module.export = ( app, options = {} ) => {
	const {
		name = '${1:email}',
		config = app.config( name, {} )
	} = options;

	//const alias = name.toString();

	app[ name ] = () = {
		${0:${VISUAL}}
	}
}
endsnippet

# ynn console

# this.console.log
snippet ;;y.cl "this.console.log( 'abc' );"
this.console.log( ${1} );
endsnippet

# this.console.warn
snippet ;;y.cw "this.console.warn( 'abc' );"
this.console.warn( ${1} );
endsnippet

# this.console.debug
snippet ;;y.cd "this.console.debug( 'abc' );"
this.console.debug( ${1} );
endsnippet

# this.console.error
snippet ;;y.ce "this.console.error( 'abc' );"
this.console.error( ${1} );
endsnippet

# this.console.info
snippet ;;y.ci "this.console.info( 'abc' );"
this.console.info( ${1} );
endsnippet

# ynn logger

# this.logger.log
snippet ";;y.ll?" "this.logger.log( 'abc' );" r
this.logger.log( ${1}, ${2:\{\}} );
endsnippet

# this.logger.error
snippet ;;y.le "this.logger.error( 'abc' );"
this.logger.error( ${1}, ${2:\{\}} );
endsnippet

# this.logger.warn
snippet ;;y.lw "this.logger.warn( 'abc' );"
this.logger.warn( ${1}, ${2:\{\}} );
endsnippet

# this.logger.info
snippet ;;y.li "this.logger.info( 'abc' );"
this.logger.info( ${1}, ${2:\{\}} );
endsnippet

# __ynn__.server
snippet ;;y._s "__ynn__.server" i
__ynn__.server
endsnippet

# ${__ynn__.server}
snippet ;;y.$_s "${__ynn__.server}" i
${__ynn__.server}
endsnippet

# const ctx = this.ctx; const query = ctx.query;
snippet ;;y.query "const ctx = this.ctx; const query = ctx.query" i
const ctx = this.ctx;
const query = ctx.query;
endsnippet

# const ctx = this.ctx; const body = ctx.body;
snippet ;;y.body "const ctx = this.ctx; const body = ctx.request.body" i
const ctx = this.ctx;
const body = ctx.request.body;
endsnippet
