snippet fims.service
import { Injectable } from '@ynn/injection';
import { IdallocService, FimsGeneralIndex, PaginateResult } from '@fims/common';
import { ${1}, ${1/\w+/\u$0/g}Creation, ${1/\w+/\u$0/g}Update } from '../interfaces';
import { ${1/\w+/\u$0/g}Model } from '../models';
import { ${1/\w+/\u$0/g}SearchService } from './${1/\w+/\l$0/g}-search.service';

@Injectable()
export class ${1/\w+/\u$0/g}Service {
	constructor(
		private model: ${1/\w+/\u$0/g}Model,
		private idalloc: IdallocService,
		private ${1/\w+/\l$0/g}SearchService: ${1/\w+/\u$0/g}SearchService
	) {}
	${0:${VISUAL}}
	async searchIndex( data: ${1/\w+/\u$0/g} | null ): Promise<void> {
		if( data ) await this.${1/\w+/\u$0/g}SearchService.create( data );
	}

	async get( condition: FimsGeneralIndex ): Promsie<${1/\w+/\u$0/g} | null> {
		return this.model.get( condition );
	}

	async create( params: ${1/\w+/\u$0/g}Creation ): Promise<string> {
		const id = await this.idalloc.id();
		const data = await this.model.insert( { ...params, id } );
		await this.searchIndex( data );
		return id;
	}

	async update( condition: FimsGeneralIndex, data: ${1/\w+/\u$0/g}Update ): Promise<${1/\w+/\u$0/g} | null> {
		const ${1/\w+/\l$0/g} = await this.model.update( condition, data );
		await this.searchIndex( ${1/\w+/\l$0/g} );
		return tag;
	}

	async list( appid: string ): Promise<PaginateResult<${1/\w+/\u$0/g}>> {
		return this.model.paginate( { appid }, { count : true } );
	}

	async delete( condition: FimsGeneralIndex ): Promise<${1/\w+/\u$0/g} | null> {
		return this.model.delete( condition );
	}
}
endsnippet

snippet fims.controller
import { Controller, Put, Post, Get, Delete, Body, Param, NotFoundException } from '@ynn/http';
import { Appid, PaginateResult } from '@fims/common';
import { ${1} } from '../interfaces';
import { ${1/\w+/\u$0/g}CreationData, ${1/\w+/\u$0/g}UpdateData } from '../dataclass';
import { ${1/\w+/\u$0/g}Service } from '../services';

@Controller( '/:appid/${1/\w+/\l$0/g}' )
export class ${1/\w+/\u$0/g}Controller {
    constructor( private service: ${1/\w+/\u$0/g}Service ) {}

    @Post()
    async create( @Appid() @Body() data: ${1/\w+/\u$0/g}CreationData ): Promise<{ id: string }> {
        const id = await this.service.create( data );
        return { id };
    }

    @Get()
    async list( @Appid() appid: string ): Promise<PaginateResult<${1/\w+/\u$0/g}>> {
        return this.service.list( appid );
    }

    @Get( ':id' )
    async get( @Appid() appid: string, @Param( 'id' ) id: string ): Promise<${1/\w+/\u$0/g}> {
        const ${1/\w+/\l$0/g} = await this.service.get( { appid, id } );
        if( !${1/\w+/\l$0/g} ) throw new NotFoundException( \`${1/\w+/\l$0/g} ${id} not found\` );
        return ${1/\w+/\l$0/g};
    }

    @Put( ':id' )
    async update(
        @Appid() appid: string,
        @Param( 'id' ) id: string,
        @Appid() @Param() @Body() data: ${1/\w+/\u$0/g}UpdateData
    ): Promise<void> {
        const ${1/\w+/\l$0/g} = await this.service.update( { appid, id }, data );
        if( !${1/\w+/\l$0/g} ) throw new NotFoundException( \`${1/\w+/\l$0/g} ${id} not found\` );
    }

    @Delete( ':id' )
    async delete( @Appid() appid: string, @Param( 'id' ) id: string ): Promise<void> {
        const ${1/\w+/\l$0/g} = await this.service.delete( { appid, id } );
        if( !${1/\w+/\l$0/g} ) throw new NotFoundException( \`${1/\w+/\l$0/g} ${id} not found\` );
    }
}
endsnippet

snippet fims.model
import { Injectable } from '@ynn/injection';
import { MongoService, MongoModel } from '@fims/common';
import { ${1} } from '../interfaces';

@Injectable()
export class ${1/\w+/\u$0/g}Model extends MongoModel<${1/\w+/\u$0/g}> {
	static schema = MongoService.Schema( {
		id : { type : String, unique : true, required : true },
		${0:${VISUAL}}
	} );

	static collection = 'fims.${1/\w+/\l$0/g}';
	static model = '${1/\w+/\u$0/g}';

	constructor( service: MongoService ) {
		super( service );
	}
}
endsnippet

snippet fims.searchmodel
import { Client, estypes } from '@elastic/elasticsearch';
import { Injectable } from '@ynn/injection';
import { ElasticSearchService } from '@fims/common';
import { ${1} } from '../interfaces';

export const ${1/\w+/\l$0/g}SearchIndexMapping = {
	properties : {
		id : { type : 'keyword' },
		appid : { type : 'keyword' }
	}
};

@Injectable()
export class ${1/\w+/\u$0/g}SearchModel {
	client: Client;
	index = 'fims-${1/\w+/\l$0/g}';

	constructor( private elasticsearch: ElasticSearchService ) {
		this.client = elasticsearch.client;
		this.init();
	}

	async init(): Promise<void> {
		const { index, client } = this;

		if( !await client.indices.exists( { index } ) ) {
			await client.indices.create( {
				index,
				// eslint-disable-next-line @typescript-eslint/no-explicit-any
				mappings : ${1/\w+/\l$0/g}SearchIndexMapping as any
			} );
		}
	}

	async create( ${1/\w+/\l$0/g}: ${1/\w+/\u$0/g} ): Promise<void> {
		await this.client.index( {
			index : this.index,
			id : ${1/\w+/\l$0/g}.id,
			document : ${1/\w+/\l$0/g}
		} );
	}

	async search( body?: object ): Promise<estypes.SearchHitsMetadata<${1/\w+/\u$0/g}>> {
		const options = body
			? { index : this.index, ...body }
			: { index : this.index };

		const result = await this.client.search<${1/\w+/\u$0/g}>( options );
		return result.hits;
	}
}
endsnippet

snippet fims.client.controller
import { Controller, Post, Get, Put, Delete } from '@ynn/http-client';
import { PaginateResult } from '@fims/common/interfaces';
import { ${1} } from '../../interfaces';

export interface ${1/\w+/\u$0/g}Methods {
    create: { id: string };
    list: PaginateResult<${1/\w+/\u$0/g}>;
    get: ${1/\w+/\u$0/g};
    update: void;
    delete: void;
}

@Controller( ':appid/${1/\w+/\l$0/g}' )
export class ${1/\w+/\u$0/g}Controller {
    @Post()
    create(): void {}

    @Get()
    list(): void {}

    @Get( ':id' )
    get(): void {}

    @Put( ':id' )
    update(): void {}
}
endsnippet

snippet fims.recoil.data
import { atomFamily, selectorFamily } from 'recoil';
import { ${1} } from '@fims/service/interfaces';
import { fims } from '@/admin/clients';

const defaults = {
	${0:${VISUAL}}
};

export const ${1/\w+/\l$0/g}State = atomFamily<${1/\w+/\u$0/g}>( {
	key : 'fims/${1/\w+/\l$0/g}',
	default : selectorFamily( {
		key : '#fims/${1/\w+/\l$0/g}',
		get : id => async (): Promise<${1/\w+/\u$0/g} | null> => {
			if( !id ) return defaults;
			const { body } = await fims.${1/\w+/\l$0/g}.get( { id } );
			return body;
		}
	} )
} );
endsnippet

snippet fims.recoil.list
import { selectorFamily } from 'recoil';
import { PaginateResult } from '@fims/common';
import { ${1} } from '@fims/sservice/interfaces';
import { fims } from '@/admin/clients';

export const ${1/\w+/\l$0/g}ListState = selectorFamily<PaginateResult<${1/\w+/\u$0/g}>>( {
	key : 'fims/${1/\w+/\l$0/g}/list',
	get( options ) {
		return async () => {
			const { body } = await fims.${1/\w+/\l$0/g}.list( options );
			return body;
		};
	}
} );
endsnippet

snippet fims.recoil.search
import { selectorFamily } from 'recoil';
import { PaginateResult } from '@fims/common';
import { ${1} } from '@fims/sservice/interfaces';
import { fims } from '@/admin/clients';
import { ${1/\w+/\l$0/g}ListState } from './${1/\w+/\l$0/g}-list.selector';

export const ${1/\w+/\l$0/g}SearchState = selectorFamily<PaginateResult<${1/\w+/\u$0/g}>>( {
	key : 'fims/${1/\w+/\l$0/g}/search',
	get( options: ${1/\w+/\u$0/g}SearchOptions ) {
		return async ( { get } ): Promise<PaginateResult<${1/\w+/\u$0/g}>> => {

			if( !options?.query ) {
				return get( ${1/\w+/\l$0/g}ListState( options ) );
			}

			const { body } = await fims.${1/\w+/\l$0/g}.search( options );
			return body;
		};
	}
} );
endsnippet

snippet fims.hook.create
import { useAsyncFn } from 'react-use';
import { ${1}Creation } from '@fims/service/interfaces';
import { fims } from '@/admin/clients';

export function useCreate${1/\w+/\u$0/g}() {
	const [ create${1/\w+/\u$0/g}State, create${1/\w+/\u$0/g} ] = useAsyncFn(
		async ( data: ${1/\w+/\u$0/g}Creation ): Promise<{ id: string }> => {
			const { body } = fims.${1/\w+/\l$0/g}.create( data );
			return body;
		}
	);

	return { create${1/\w+/\u$0/g}State, create${1/\w+/\u$0/g} };
}
endsnippet

snippet fims.hook.search
import { useState, useEffect } from 'react';
import { useRecoilValue, useRecoilCallback, useRecoilRefresher_UNSTABLE as useRecoilRefresher } from 'recoil';
import { ${1}State, ${1/\w+/\l$0/g}SearchState } from '@/admin/recoil/${1/\w+/\l$0/g}';

export function use${1/\w+/\u$0/g}Search( options ) {
	const [ safe, setSafe ] = useState( false );
	const recoilValue = ${1/\w+/\l$0/g}SearchState( options );
    const ${1/\w+/\l$0/g}s = useRecoilValue( recoilValue );
    const save = useRecoilCallback( ( { set } ) => ( id, data ) => {
        set( ${1/\w+/\l$0/g}State( id ), data );
    } );

    useEffect( () => {
        ${1/\w+/\l$0/g}s?.list.forEach( item => { save( item.id, item ) } );
		setSafe( true );
    }, [ ${1/\w+/\l$0/g}s ] );

    const refresh = useRecoilRefresher( recoilValue );
    return { ${1/\w+/\l$0/g}s, refresh, safe, recoilValue };
}
endsnippet

snippet fims.hook.refreshdata
import { useRecoilRefresher_UNSTABLE as useRecoilRefresher } from 'recoil';
import { ${1}State } from '@/admin/recoil/${1/\w+/\l$0/g}';

export function useRefresh${1/\w+/\u$0/g}( id?: string | undefined ) {
    return useRecoilRefresher( ${1/\w+/\l$0/g}State( id ) );
}
endsnippet

snippet fims.hook.refreshsearch
import { useRecoilRefresher_UNSTABLE as useRecoilRefresher } from 'recoil';
import { ${1}SearchState } from '@/admin/recoil/${1/\w+/\l$0/g}';
import { ${1/\w+/\u$0/g}SearchOptions } from '@fims/service/interfaces';

export function useRefresh${1/\w+/\u$0/g}Search( options: ${1/\w+/\u$0/g}SearchOptions ) {
    return useRecoilRefresher( ${1/\w+/\l$0/g}SearchState( options ) );
}
endsnippet

snippet fims.hook.data
import { useRecoilValue, useRecoilRefresher_UNSTABLE as useRecoilRefresher } from 'recoil';
import { ${1}State } from '@/admin/recoil/${1/\w+/\l$0/g}';

export function use${1/\w+/\u$0/g}( id?: string | undefined ) {
	const ${1/\w+/\l$0/g} = useRecoilValue( ${1/\w+/\l$0/g}State( id ) );
	const refresh = useRecoilRefresher( ${1/\w+/\l$0/g}State( id ) );

	return { ${1/\w+/\l$0/g}, refresh };
}
endsnippet

snippet fims.hook.freshdata
import { useRefresh } from '../useRefresh';
import { use${1} } from './use${1/\w+/\u$0/g}';

export function useFresh${1/\w+/\u$0/g}( id?: string | undefined ) {
	const { refresh, ${1/\w+/\l$0/g} } = use${1/\w+/\u$0/g}( id );
	useRefresh( refresh );
	return { refresh, ${1/\w+/\l$0/g} };
}
endsnippet

snippet fims.hook.freshsearch
import { useRefresh } from '@/common/hooks';
import { use${1}Search } from './use${1/\w+/\u$0/g}Search';

export function useFresh${1/\w+/\u$0/g}Search( options ) {
	const { refresh, ${1/\w+/\l$0/g}s, safe, recoilValue } = use${1/\w+/\u$0/g}Search( options );
	useRefresh( recoilValue.key, refresh );
	return { refresh, ${1/\w+/\l$0/g}s, safe };
}
endsnippet

snippet fims.hook.update
import { useRecoilCallback } from 'recoil';
import { useAsyncFn } from 'react-use';
import { ${1}Update } from '@fims/service/interfaces';
import { fims } from '@/admin/clients';
import { ${1/\w+/\l$0/g}State } from '@/admin/recoil/${1/\w+/\l$0/g}';

export function useUpdate${1/\w+/\u$0/g}( id?: string | undefined ) {
	const save = useRecoilCallback( ( { set } ) => ( id, data ) => {
		set( ${1/\w+/\l$0/g}State( id ), ( ${1/\w+/\l$0/g} ) => {
			return { ...${1/\w+/\l$0/g}, ...data };
		} );
	} );

	const [ update${1/\w+/\u$0/g}State, update${1/\w+/\u$0/g} ] = useAsyncFn(
		async ( data: ${1/\w+/\u$0/g}Update ): Promise<void> => {
			save( data.id ?? id, data );
			await fims.${1/\w+/\l$0/g}.update( { id, ...data } );
		}
	);

	return { update${1/\w+/\u$0/g}State, update${1/\w+/\u$0/g} };
}
endsnippet

snippet fims.react.table "create a <Table /> component bases on @/common/components/Table"
import React from 'react';
import clsx from 'clsx';
import msx from '@nextseason/msx';
import { ${1} } from '@fims/service/interfaces';
import T, { TableProps as TProps } from '@/common/components/Table';
import Actions from '../Actions';
import columnMap from './columns';

export type TableProps = TProps<${1/\w+/\u$0/g}>;

const defaultColumns = [
	${0:${VISUAL}}
] as const satisfies ( keyof typeof columnMap )[];

export default function Table( props: TableProps ): JSX.Element {

	const { sx, className, ...rest } = props;

	return (
		<T<${1/\w+/\u$0/g}>
			className={clsx( 'Fims${1/\w+/\u$0/g}Table-root', className )}
			sx={msx( sx )}
			defaultColumns={defaultColumns}
			columnMap={columnMap}
			Actions={Actions}
			{...rest}
		/>
	);
}
endsnippet

snippet fims.react.actions
import React from 'react';
import clsx from 'clsx';
import msx from '@nextseason/msx';
import { Override } from '@common/typings';
import Button from '@/common/components/Button';
import { useNavigate, useDelete${1} } from '@/fims/hooks';

export type ActionType =
    | 'edit'
    | 'delete';

export type ActionsProps = Override<Button.ActionProps, {
    id: string;
    actions?: ActionType[];
	onActionFinished?: ( action: string, id: string ) => void;
}>;

export default function Actions( props: ActionsProps ): JSX.Element {

    const { sx, className, id, actions, onActionFinished, ...rest } = props;
    const { navigate } = useNavigate();
    const { delete${1/\w+/\u$0/g}, delete${1/\w+/\u$0/g}State } = useDelete${1/\w+/\u$0/g}();

	const handleAction = async ( action: string ): Promise<void> => {
		switch( action ) {
			case 'edit' :
				await delete${1/\w+/\u$0/g}( id );
				break;
			case 'delete' :
				break;
		}
		onActionFinished?.( action, id );
	};

    return (
        <Button.Action className={clsx( className )} sx={msx( sx )}
            loading={delete${1/\w+/\u$0/g}State.loading}
            actions={actions ?? [ 'edit', 'delete' ]}
			onAction={handleAction}
            ActionProps={{ edit : { text : '查看' } }}
            {...rest}
        />
    );
}
endsnippet

snippet fims.react.tablecell "create a table cell component structure"
import React from 'react';
import { ${1} } from '@fims/service/interfaces';
import { CellProps } from '@/common/components/Table';

export default function ${2}( props: CellProps<${1/\w+/\u$0/g}> ): JSX.Element {
	const { row } = props;
	return (
		${0:${VISUAL}}
	);
}
endsnippet

snippet "fims.imfc" "import component from '@/fims/component/*'" r
import ${1} from '@/fims/components/$1${0:${VISUAL}}';
endsnippet

snippet "fims.imcc" "import component from '@/common/component/*'" r
import ${1} from '@/common/components/$1${0:${VISUAL}}';
endsnippet

snippet exc
export const ${1} = _$1;
${0:${VISUAL}}
endsnippet

snippet ext
export type ${1} = _$1;
${0:${VISUAL}}
endsnippet

snippet createsearchmodel
import { PaginateResult } from '@ums/library/interfaces';
import { createSearchModel } from '@ums/reversion';
import { ${1}, ${2} } from '@${3}/common/interfaces';
import { $3 } from '@/client';

export const use$1SearchModel = createSearchModel<$1, $2>( {
	requests : {
		fetch : async ( options: $2 ): Promise<PaginateResult<$1>> => {
			const { body } = await $3.${1/\w+/\l$0/g}.search( options );
			return body;${0:${VISUAL}}
		}
	}
} );
endsnippet

snippet react.c "create a react function component"
import React from 'react';
import clsx from 'clsx';
import { msx } from '@nextseason/msx';
import ${1:Box}, { $1Props } from '@mui/joy/$1';
import { Override } from '@common/typings';

export type ${2}Props = Override<$1Props, {
}>;

export default function $2( props: $2Props ): JSX.Element {

	const { sx, className, ...rest } = props;

	return (
		<$1 className={clsx( className )} sx={msx( sx )} {...rest}>
			${0:${VISUAL}}
		</$1>
	);
}
endsnippet

snippet react.f "create a react forwardRef component"
import React from 'react';
import clsx from 'clsx';
import { msx } from '@nextseason/msx';
import ${1:Box}, { $1Props } from '@mui/joy/$1';
import { Override } from '@common/typings';

export type ${2}Props = Override<$1Props, {
}>;

export default React.forwardRef(
	function $2( props: $2Props, ref: React.ForwardedRef<HTMLElement> ): JSX.Element {
		const { sx, className, ...rest } = props;

		return (
			<$1 className={clsx( className )}
				sx={msx( sx )}
				ref={ref}
				{...rest}
			>
				${0:${VISUAL}}
			</$1>
		);
	}
);
endsnippet

snippet react.h.us "const [ x, setX ] = React.useState( v )"
const [ ${1}, set${1/\w+/\u$0/g} ] = React.useState( ${2:null} );
endsnippet

snippet react.h.ur "const xRef = React.useRef()"
const ${1} = React.useRef(${2});
endsnippet

snippet react.h.ue "React.useEffect( () => {} );"
React.useEffect( () => {	
	${0:${VISUAL}}
}, [${1}] );
endsnippet

snippet tableview
import React, { useEffect } from 'react';
import clsx from 'clsx';
import { msx } from '@nextseason/msx';
import { useSearchParams } from 'react-router-dom';
import Sheet, { SheetProps } from '@mui/joy/Sheet';
import DataTable from '@nextseason/uniui/DataTable';
import { Override } from '@common/typings';
import { PaginateType } from '@ums/library/enums';
import { ${1} } from '@/models';
import { columns } from './columns';

export type TableViewProps = Override<SheetProps, {
	${2}
}>;

export default function TableView( props: TableViewProps ): JSX.Element {

    const { sx, className,${3} ...rest } = props;
    const [ searchParams, setSearchParams ] = useSearchParams();
    // eslint-disable-next-line @typescript-eslint/prefer-nullish-coalescing
    const pn = parseInt( searchParams.get( 'pn' ) || '1' );
    // eslint-disable-next-line @typescript-eslint/prefer-nullish-coalescing
    const rn = parseInt( searchParams.get( 'rn' ) || '20' );
    const model = $1();

    const handlePaginationChange = ( { pn, rn } ): void => {
        setSearchParams( searchParams => {
            searchParams.set( 'pn', pn );
            searchParams.set( 'rn', rn );
            return searchParams;
        } );
    };

    useEffect( () => {
        model.fetch( {
            pn, rn,$3
            pt : PaginateType.PAGINATION
        } );
    }, [ $3${0:${VISUAL}}pn, rn ] );

    return (
        <Sheet className={clsx( className )} sx={msx( sx )} {...rest}>
            <DataTable
                rows={model.data?.list ?? []}
                columns={columns}
                loading={model.state.loading}
                rowCount={model.data?.total ?? 0}
                pagination={{ pn, rn }}
                onPaginationChange={handlePaginationChange}
            />
        </Sheet>
    );
}
endsnippet

snippet "tc" "add a table column" rb
import React from 'react';
import { GridColDef } from '@nextseason/uniui/DataTable';

export const columns: GridColDef[] = [
	${0:${VISUAL}}
];
endsnippet


snippet "tc.item" "add a table column" rb
{
	field : '${1}',
	type : '${4:string}',
	headerName : '${2}',
	sortable : ${3:false},
	renderCell : ( { row } ) => (
		${0:${VISUAL}}
	)
}
endsnippet

snippet "tc.time" "add a table column with the data type time" rb
{
	field : '${1:createdAt}',
	type : '${4:dateTime}',
	headerName : '${2:创建时间}',
	sortable : ${3:true},
	minWidth : 150,
	valueGetter : value => value && new Date( value ),
	renderCell : ( { value } ) => (
		<Center inline>
			<Time value={value} level="body-sm" />
		</Center>
	)
}${0:${VISUAL}}
endsnippet

snippet "tc.actions?" "add a table column with the data type actions" rb
{
	field : '${1:operations}',
	type : 'actions',
	renderCell : ( { row } ) => (
		<Row s1 inline width="auto">
			${0:${VISUAL}}
		</Row>
	)
}
endsnippet
