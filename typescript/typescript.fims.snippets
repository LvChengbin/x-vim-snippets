snippet fims.controller
import { Controller, Put, Post, Get, Delete, Body, Param, NotFoundException } from '@ynn/http';
import { Appid, PaginateResult } from '@fims/common';
import { ${1} } from '../interfaces';
import { ${1/\w+/\u$0/g}CreationData, ${1/\w+/\u$0/g}UpdateData } from '../dataclass';
import { ${1/\w+/\u$0/g}Service } from '../services';

@Controller( '/:appid/${1/\w+/\l$0/g}' )
export class ${1/\w+/\u$0/g}Controller {
    constructor( private service: ${1/\w+/\u$0/g}Service ) {}

    @Post()
    async create( @Appid() @Body() data: ${1/\w+/\u$0/g}CreationData ): Promise<{ id: string }> {
        const id = await this.service.create( data );
        return { id };
    }

    @Get()
    async list( @Appid() appid: string ): Promise<PaginateResult<${1/\w+/\u$0/g}>> {
        return this.service.list( appid );
    }

    @Get( ':id' )
    async get( @Appid() appid: string, @Param( 'id' ) id: string ): Promise<${1/\w+/\u$0/g}> {
        const ${1/\w+/\l$0/g} = await this.service.get( { appid, id } );
        if( !${1/\w+/\l$0/g} ) throw new NotFoundException( \`${1/\w+/\l$0/g} ${id} not found\` );
        return ${1/\w+/\l$0/g};
    }

    @Put( ':id' )
    async update(
        @Appid() appid: string,
        @Param( 'id' ) id: string,
        @Appid() @Param() @Body() data: ${1/\w+/\u$0/g}UpdateData
    ): Promise<void> {
        const ${1/\w+/\l$0/g} = await this.service.update( { appid, id }, data );
        if( !${1/\w+/\l$0/g} ) throw new NotFoundException( \`${1/\w+/\l$0/g} ${id} not found\` );
    }

    @Delete( ':id' )
    async delete( @Appid() appid: string, @Param( 'id' ) id: string ): Promise<void> {
        const ${1/\w+/\l$0/g} = await this.service.delete( { appid, id } );
        if( !${1/\w+/\l$0/g} ) throw new NotFoundException( \`${1/\w+/\l$0/g} ${id} not found\` );
    }
}
endsnippet

snippet fims.client.controller
import { Controller, Post, Get, Put, Delete } from '@ynn/http-client';
import { PaginateResult } from '@fims/common/interfaces';
import { ${1} } from '../../interfaces';

export interface ${1/\w+/\u$0/g}Methods {
    create: { id: string };
    list: PaginateResult<${1/\w+/\u$0/g}>;
    get: ${1/\w+/\u$0/g};
    update: void;
    delete: void;
}

@Controller( ':appid/${1/\w+/\l$0/g}' )
export class ${1/\w+/\u$0/g}Controller {
    @Post()
    create(): void {}

    @Get()
    list(): void {}

    @Get( ':id' )
    get(): void {}

    @Put( ':id' )
    update(): void {}
}
endsnippet

snippet fims.recoil.list
import { selectorFamily } from 'recoil';
import { PaginateResult } from '@fims/common';
import { ${1} } from '@fims/sservice/interfaces';
import { fims } from '@/admin/clients';

export const ${1/\w+/\l$0/g}ListState = selectorFamily<PaginateResult<${1/\w+/\u$0/g}>> ( {
	key : 'fims/${1/\w+/\l$0/g}/list',
	get( options ) {
		return async () => {
			const { body } = await fims.${1/\w+/\l$0/g}.list( options );
			return body;
		};
	}
} );
endsnippet

snippet fims.recoil.search
import { selectorFamily } from 'recoil';
import { PaginateResult } from '@fims/common';
import { ${1} } from '@fims/sservice/interfaces';
import { fims } from '@/admin/clients';
import { ${1/\w+/\l$0/g}ListState } from './${1/\w+/\l$0/g}-list.selector';

export const ${1/\w+/\l$0/g}SearchState = selectorFamily<PaginateResult<${1/\w+/\u$0/g}>> ( {
	key : 'fims/${1/\w+/\l$0/g}/list',
	get( options: ${1/\w+/\u$0/g}SearchOptions ) {
		return async () => {

			if( !options.query ) {
				return get( ${1/\w+/\l$0/g}ListState( options ) );
			}

			const { body } = await fims.${1/\w+/\l$0/g}.list( options );
			return body;
		};
	}
} );
endsnippet

snippet fims.hook.search
import { useEffect } from 'react';
import { useRecoilValue, useRecoilCallback, useRecoilRefresher_UNSTABLE as useRecoilRefresher } from 'recoil';
import { ${1}State, ${1/\w+/\l$0/g}SearchState } from '@/admin/recoil/${1/\w+/\l$0/g}';

export function use${1/\w+/\u$0/g}Search( options ) {
    const ${1/\w+/\l$0/g}s = useRecoilValue( ${1/\w+/\l$0/g}SearchState( options ) );
    const save = useRecoilCallback( ( { set } ) => ( id, data ) => {
        set( ${1/\w+/\l$0/g}State( id ), data );
    } );

    useEffect( () => {
        ${1/\w+/\l$0/g}s?.list.forEach( item => { save( item.id, item ) } );
    }, [ ${1/\w+/\l$0/g}s ] );

    const refresh = useRecoilRefresher( ${1/\w+/\l$0/g}SearchState( options ) );
    return { ${1/\w+/\l$0/g}s, refresh };
}
endsnippet

snippet fims.hook.refreshsearch
import { useRecoilRefresher_UNSTABLE as useRecoilRefresher } from 'recoil';
import { ${1}SearchState } from '@/admin/recoil/${1/\w+/\l$0/g}';

export function useRefresh${1/\w+/\u$0/g}Search( options ) {
    return useRecoilRefresher( ${1/\w+/\l$0/g}SearchState( options ) );
}
endsnippet
